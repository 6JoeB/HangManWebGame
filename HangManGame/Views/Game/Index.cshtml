@using Microsoft.AspNetCore.Http;
@model HangManGame.Models.Guesses;

@{
    ViewData["Title"] = "Hang Man Game";
    string username = Context.Session.GetString("User");
    Player player = Player.Register(username);
}


    @{
        if (Model.HasLost)
        {
            <div class="container-fluid mid-aligned win-lose-card">
                <p class="space-top"> You Lose :(</p>
                <p class="space-top space-bot"> @Html.ActionLink("New Game", "Index", "Game")</p>
                <img class="space-bot" src="https://media.giphy.com/media/HvRZOW92Jg2aY/giphy.gif" />
            </div>
        }
        else if (Model.HasWon)
        {

            <div class="container-fluid mid-aligned win-lose-card">
                <p> You Win! :)</p>
                <p class="space-top space-bot"> @Html.ActionLink("New Game", "Index", "Game")</p>
                <img class="space-bot" src="https://media.giphy.com/media/a0h7sAqON67nO/giphy.gif" />
            </div>
        }
        else
        {

            <div class="page-header mid-aligned">
                <h2>Welcome to Hang Man, @{@player.UserName}!</h2>
            </div>

            <div class="container-fluid body-card">
                <div class="container-fluid playing-card mid-aligned game-text-size">
                    <p class="left-aligned lives-remaining-text">
                        Lives remaining: @{@Model.LivesRemaining}
                    </p>
                    <p class="word-text">
                        @{@Model.OutputAnswer()}
                    </p>
                    <form method="Post">
                        <label asp-for="@Model.Guess">Please enter your guess: </label>
                        <input asp-for="@Model.Guess" placeholder="Enter your guess..." required value="" max="1" />
                        @Html.ValidationMessageFor(m => m.Guess)

                        <button type="submit" class="btn btn-primary">Submit</button>
                    </form>

                        <p>Your previous guess was: @{@Model.Guess}</p>

                        @for (int i = 0; i < Model.PreviousGuesses.Count; i++)
                        {
                            <input type="hidden" asp-for="@Model.PreviousGuesses[i]" value="@Model.PreviousGuesses[i]" />
                        }

                        <p>Letters correctly guessed: </p>
                        <ul>
                            @foreach  (var correctGuess in Model.CorrectGuesses)
                            {
                                <ul>@correctGuess</ul>
                            }
                        </ul>

                        <p>Letters incorrectly guessed: </p>
                        <ul>
                            @foreach  (var incorrectGuess in Model.IncorrectGuesses)
                            {
                                <ul>@incorrectGuess</ul>
                            }
                        </ul>

                        <p>Letters still available to guess: </p>
                        <ul>
                            @foreach (var lettersAvailable in Model.LettersAvailable)
                            {
                                {@lettersAvailable}
                            }
                        </ul>
                </div>
            </div>
        }
    }
