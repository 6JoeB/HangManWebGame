@using Microsoft.AspNetCore.Http;
@using  HangManGame.Models;
@model HangManGame.Models.Game;

@{
    ViewData["Title"] = "Hang Man Game";
    string guess = Context.Session.GetString("Guess");
    string username = Context.Session.GetString("User");
    string CorrectlyGuessedLetters = Context.Session.GetString("CorrectlyGuessedLetters");


    Player player = Player.Register(username);
    Game game = @Model != null ? @Model : new Game() { CorrectlyGuessed = new List<string>() };
}


@{  
    if (game.Win == true)
    {
        <div class="container-fluid mid-aligned win-lose-card">
        <p class="space-top"> You Win! :)</p>
        <p class="space-top"> The word was @{@game.FullWord}</p>
        <p class="space-top space-bot"> @Html.ActionLink("New Game", "Index", "Game")</p>
        <img class="space-bot" src="https://media.giphy.com/media/a0h7sAqON67nO/giphy.gif" />
        </div>
    }

    else if (game.Lose == true)
    {
        <div class="container-fluid mid-aligned win-lose-card">
        <p class="space-top"> You Lose :(</p>
        <p class="space-top"> The word was @{@game.FullWord}</p>
        <p class="space-top space-bot"> @Html.ActionLink("New Game", "Index", "Game")</p>
        <img class="space-bot" src="https://media.giphy.com/media/HvRZOW92Jg2aY/giphy.gif" />
        </div>
    }

    else
    {
        <div class="page-header mid-aligned">
            <h2> Welcome to hangman, @player.UserName</h2>
        </div>

        <div class="container-fluid body-card">
            <div class="container-fluid playing-card mid-aligned game-text-size">
                <form action="/game/submitguess" method="POST">
                    <span class="left-aligned gameplay-text">Guesses remaining: @{@game.NumberOfGuesses}</span>
                        
                    <span class="right-aligned gameplay-text">Your previous guess was: @{@game.Guess}</span>

                    <br />

                    <p class="word-text">
                        @foreach (var letter in @game.Answer)
                        {
                            <span>@{@letter} </span>
                        }
                    </p>

                    <br />
                    <br />

                    <span class="gameplay-text">Please enter your guess: </span>
                    <input type="text" name="guess" required ="" max="1"  autofocus/>
                    @Html.ValidationMessageFor(m => m.Guess)

                    <button type="submit" class="btn btn-primary">Submit</button>


                    <div class="row">
                        <div class="column">
                            <p class="mid-aligned gameplay-text">Letters correctly guessed: </p>
                                <ul>
                                    @foreach  (var correctGuess in game.CorrectlyGuessed)
                                    {
                                        <span class="mid-aligned gameplay-text"> @correctGuess </span>
                                    }
                                </ul>
                        </div>

                        <div class="column">
                            <p class="mid-aligned gameplay-text">Letters incorrectly guessed: </p>
                                <ul>
                                    @foreach  (var incorrectGuess in game.IncorrectlyGuessed)
                                    {
                                        <span class="mid-aligned gameplay-text"> @incorrectGuess </span>
                                    }
                                </ul>
                        </div>
                    </div>
                </form>
            </div>
        </div>




    }
}
 
    












